*** code_to_ro-crate 27.03.2024

*** prepare MGF sequence and data products - ro-crate builing

**** step1 for now we managed to build ro-crate using "raw" MGF file - i.e. HMNJKDSX3-UDI204 (note the change from "." to "-")
*** we use create-ro-crate.py from https://github.com/emo-bon/metaGOflow-data-products-RO-crate-example/tree/main
*** and ro-crate.config.yaml from https://github.com/emo-bon/metaGOflow-data-products-RO-crate-example/tree/main
*** the ro-crate.config.yaml file needs some modifications:

"datePublished": "None"
"prefix": "DBH"
"run_parameter": "run"
"ena_accession_raw_data": "not_uploaded_yet"
"metagoflow_version": "v1"
"missing_files" : []

*** note that not all the samples will have DBH as a prefix - needs to be monitored
*** the "run_parameter" is something that Cymon has given to MGF to run - he used "run", which creates "run.yml" in the MGF folder
*** the MGF folder needs the run.yml to proceed - please note that this file will have different name in Greek dataset as they have used differnet strategy (of -n in run_wf.sh sth command to run MGF itself) - i.e. ro-crate.config.yaml needs to be modified for each sample

python create-ro-crate.py HMNJKDSX3-UDI204/ ro-crate-config.yaml 
*** that works!!!

**** step: preparation for step 2 ("two-level" ro-crate)
*** now the problem is to decide which file actually does go to the ro-crate 
*** it was decided (Slack 19 March between Cymon and Katrina - now also on Confluence) to create two ro-crates, for "sequencing" and "data-products" separately and put them on s3store (s5cmd) and hence the ro-crate design should follow that


*** tree of an example of MGF data product - in brackets keep/discard and seq/data-prod
├── config.yml (keep) (house-keeping)
├── results (to be changed)
│   ├── DBH_AAAEOSDA_4_1_HMNJKDSX3.UDI204_clean.fastq.trimmed.fasta (keep) (seq)
│   ├── DBH_AAAEOSDA_4_1_HMNJKDSX3.UDI204_clean.fastq.trimmed.qc_summary (keep) (seq)
│   ├── DBH_AAAEOSDA_4_2_HMNJKDSX3.UDI204_clean.fastq.trimmed.fasta (keep) (seq)
│   ├── DBH_AAAEOSDA_4_2_HMNJKDSX3.UDI204_clean.fastq.trimmed.qc_summary (keep) (seq)
│   ├── DBH.merged_CDS.faa (keep) (seq)
│   ├── DBH.merged_CDS.ffn (keep) (seq)
│   ├── DBH.merged.cmsearch.all.tblout.deoverlapped (keep) (seq)
│   ├── DBH.merged.fasta (keep) (seq)
│   ├── DBH.merged.motus.tsv (keep) (seq)
│   ├── DBH.merged.qc_summary (keep) (seq)
│   ├── DBH.merged.unfiltered_fasta (keep) (seq)
│   ├── fastp.html (keep) (seq)
│   ├── final.contigs.fa (keep) (seq)
│   ├── functional-annotation (keep) (data-prod)
│   │   ├── DBH.merged_CDS.I5.tsv.chunks (discard)
│   │   ├── DBH.merged_CDS.I5.tsv.gz (keep) (data-prod)
│   │   ├── DBH.merged.hmm.tsv.chunks (discard)
│   │   ├── DBH.merged.hmm.tsv.gz (keep) (data-prod)
│   │   ├── DBH.merged.summary.go (keep) (data-prod)
│   │   ├── DBH.merged.summary.go_slim (keep) (data-prod)
│   │   ├── DBH.merged.summary.ips (keep) (data-prod)
│   │   ├── DBH.merged.summary.ko (keep) (data-prod)
│   │   ├── DBH.merged.summary.pfam (keep) (data-prod)
│   │   └── stats (keep) (data-prod)
│   │       ├── go.stats (keep) (data-prod)
│   │       ├── interproscan.stats (keep) (data-prod)
│   │       ├── ko.stats (keep) (data-prod)
│   │       ├── orf.stats (keep) (data-prod)
│   │       └── pfam.stats (keep) (data-prod)
│   ├── RNA-counts (keep) (seq)
│   ├── sequence-categorisation (keep) (data-prod)
│   │   ├── 5_8S.fa.gz (keep) (data-prod)
│   │   ├── alpha_tmRNA.RF01849.fasta.gz (keep) (data-prod)
│   │   ├── Bacteria_small_SRP.RF00169.fasta.gz (keep) (data-prod)
│   │   ├── LSU_rRNA_archaea.RF02540.fa.gz (keep) (data-prod)
│   │   ├── LSU_rRNA_bacteria.RF02541.fa.gz (keep) (data-prod)
│   │   ├── LSU_rRNA_eukarya.RF02543.fa.gz (keep) (data-prod)
│   │   ├── Metazoa_SRP.RF00017.fasta.gz (keep) (data-prod)
│   │   ├── RNaseP_bact_a.RF00010.fasta.gz (keep) (data-prod)
│   │   ├── SSU_rRNA_archaea.RF01959.fa.gz (keep) (data-prod)
│   │   ├── SSU_rRNA_bacteria.RF00177.fa.gz (keep) (data-prod)
│   │   ├── SSU_rRNA_eukarya.RF01960.fa.gz (keep) (data-prod)
│   │   ├── tmRNA.RF00023.fasta.gz (keep) (data-prod)
│   │   ├── tRNA.RF00005.fasta.gz (keep) (data-prod)
│   │   └── tRNA-Sec.RF01852.fasta.gz (keep) (data-prod)
│   └── taxonomy-summary (keep) (data-prod)
│       ├── LSU (keep) (data-prod)
│       │   ├── DBH.merged_LSU.fasta.mseq.gz (keep) (data-prod)
│       │   ├── DBH.merged_LSU.fasta.mseq_hdf5.biom (keep) (data-prod)
│       │   ├── DBH.merged_LSU.fasta.mseq_json.biom (keep) (data-prod)
│       │   ├── DBH.merged_LSU.fasta.mseq.tsv (keep) (data-prod)
│       │   ├── DBH.merged_LSU.fasta.mseq.txt (keep) (data-prod)
│       │   └── krona.html (keep) (data-prod)
│       └── SSU (keep) (data-prod)
│           ├── DBH.merged_SSU.fasta.mseq.gz (keep) (data-prod)
│           ├── DBH.merged_SSU.fasta.mseq_hdf5.biom (keep) (data-prod)
│           ├── DBH.merged_SSU.fasta.mseq_json.biom (keep) (data-prod)
│           ├── DBH.merged_SSU.fasta.mseq.tsv (keep) (data-prod)
│           ├── DBH.merged_SSU.fasta.mseq.txt (keep) (data-prod)
│           └── krona.html (keep) (data-prod)
└── run.yml (keep) (house-keeping)


*** "-data-products" example

├── functional-annotation
│   ├── DBH.merged_CDS.I5.tsv.gz
│   ├── DBH.merged.hmm.tsv.gz
│   ├── DBH.merged.summary.go
│   ├── DBH.merged.summary.go_slim
│   ├── DBH.merged.summary.ips
│   ├── DBH.merged.summary.ko
│   ├── DBH.merged.summary.pfam
│   └── stats
│       ├── go.stats
│       ├── interproscan.stats
│       ├── ko.stats
│       ├── orf.stats
│       └── pfam.stats
├── ro-crate-metadata.json
├── run.yml
├── sequence-categorisation
│   ├── 5_8S.fa.gz
│   ├── alpha_tmRNA.RF01849.fasta.gz
│   ├── Bacteria_large_SRP.RF01854.fasta.gz
│   ├── Bacteria_small_SRP.RF00169.fasta.gz
│   ├── cyano_tmRNA.RF01851.fasta.gz
│   ├── LSU_rRNA_archaea.RF02540.fa.gz
│   ├── LSU_rRNA_bacteria.RF02541.fa.gz
│   ├── LSU_rRNA_eukarya.RF02543.fa.gz
│   ├── RNaseP_bact_a.RF00010.fasta.gz
│   ├── RNaseP_bact_b.RF00011.fasta.gz
│   ├── SSU_rRNA_archaea.RF01959.fa.gz
│   ├── SSU_rRNA_bacteria.RF00177.fa.gz
│   ├── SSU_rRNA_eukarya.RF01960.fa.gz
│   ├── tmRNA.RF00023.fasta.gz
│   ├── tRNA.RF00005.fasta.gz
│   └── tRNA-Sec.RF01852.fasta.gz
└── taxonomy-summary
    ├── LSU
    │   ├── DBH.merged_LSU.fasta.mseq.gz
    │   ├── DBH.merged_LSU.fasta.mseq_hdf5.biom
    │   ├── DBH.merged_LSU.fasta.mseq_json.biom
    │   ├── DBH.merged_LSU.fasta.mseq.tsv
    │   ├── DBH.merged_LSU.fasta.mseq.txt
    │   └── krona.html
    └── SSU
        ├── DBH.merged_SSU.fasta.mseq.gz
        ├── DBH.merged_SSU.fasta.mseq_hdf5.biom
        ├── DBH.merged_SSU.fasta.mseq_json.biom
        ├── DBH.merged_SSU.fasta.mseq.tsv
        ├── DBH.merged_SSU.fasta.mseq.txt
        └── krona.html


*** "-sequence" example

├── config.yml
├── DBH_1_clean.fastq.trimmed.fasta
├── DBH_1_clean.fastq.trimmed.qc_summary
├── DBH_2_clean.fastq.trimmed.fasta
├── DBH_2_clean.fastq.trimmed.qc_summary
├── DBH.merged_CDS.faa
├── DBH.merged_CDS.ffn
├── DBH.merged.cmsearch.all.tblout.deoverlapped
├── DBH.merged.fasta
├── DBH.merged.motus.tsv
├── DBH.merged.qc_summary
├── DBH.merged.unfiltered_fasta
├── fastp.html
├── final.contigs.fa
├── RNA-counts
├── ro-crate-metadata.json
└── run.yml




*** to download an example MGF products from redi to a local dir
scp -r redi:///usr/local/scratch/metaGOflow-v1.0.0/FINISHED/SEDIMENTS/HMNJKDSX3.UDI236 .

**** step 2 preparing an actual "two-level" ro-crate
*** code to do a general deletes; from a dir where multiple MGF samples are placed (would work if only a single file is present)

for f in *UDI* ; do rm ~/Desktop/*UDI*/results/functional-annotation/[A-Z]*.merged_CDS.I5.tsv.chunks ; done
for f in *UDI* ; do rm ~/Desktop/*UDI*/results/functional-annotation/DBH.merged.hmm.tsv.chunks ; done
for f in *UDI* ; do rm ~/Desktop/*UDI*/*bz2 ; done
for f in *UDI* ; do rm ~/Desktop/*UDI*/*zip ; done
for f in *UDI* ; do rm ~/Desktop/*UDI*/*json ; done

**** general note - for a single sample please ignore the following code - the purpose is to automatically rename the samples and place them in the appropiate folders - not tested in bulk
*** create two folders with a specific name for each MGF (I can make a list though) 
*** these folders will become two independent buckets (and will be conver
**** note that for the Greek samples there will be json file and zip file (i.e. ro-crate donw) - that needs to be deleted ! (?)
#for f in *UDI235 ; do mkdir EMOBON0000001-products EMOBON000001-sequence ; done (or sth) 
#for f in AA ; do mkdir $f/BB  ; done
#for f in *UDI204 ; do mkdir $f/EMOBON0001-seq $f/EMOBON-prod ; done (or sth)
#for f in HWLTKDRXY.UDI235 ; do mkdir $f 	EMOBON00001-products	EMOBON00001-sequence
 

*** prepare an automotic code to mkdir two folders per sample with corresponding EMOBON ref code for each sequencing sample (samples are stored with the "sequencing name" on redi - NOTE THE MOCK SAMPLE DOES NOT HAVE THE EMOBON REF CODE !!! 
*** from a file https://docs.google.com/spreadsheets/d/1j9tRRsRCcyViDMTB1X7lx8POY1P5bV7UijxKKSebZAM/edit#gid=0
*** take column C as EMOBON ref code and save it as to_EMOBON_prep_code and column E as "to_UDI_prep_code"

grep -o _H.*.UDI[0-9]* to_UDI_prep_code | sed 's/_//g' > to_UDI_prep_clean1_code
sed -i 's/^/for f in /g'  to_UDI_prep_clean1_code
sed -i 's/$/ ; do mkdir /g'  to_UDI_prep_clean1_code
sed 's/$/-products/g' to_EMOBON_prep_code > EMOBON_prep-products
sed -i 's/^/$f\//g' EMOBON_prep-products
sed 's/$/-sequence/g' to_EMOBON_prep_code > EMOBON_prep-sequence
sed -i 's/^/$f\//g' EMOBON_prep-sequence
paste to_UDI_prep_clean1_code EMOBON_prep-products EMOBON_prep-sequence > code_to_rename_UDI_for_EMOBONrefCODE ; 
sed -i 's/$/ ; done ; /g' code_to_rename_UDI_for_EMOBONrefCODE

bash code_to_rename_UDI_for_EMOBONrefCODE


*** now place the files into the appropriate EMOBONXXXX folders ???

# mv ~/Desktop/*UDI*/results/functional-annotation ~/Desktop/*UDI*/EMOBON[0-9]*-products
grep -o _H.*.UDI[0-9]* to_UDI_prep_code | sed 's/_//g' > to_UDI_to_mv

sed -i 's/^/for f in /g'  to_UDI_to_mv
*** here change the dir location if needed ("Desktop" as an example only)
sed -i 's/$/ ; do mv ~\/Desktop\/$f\/results\/functional-annotation ~\/Desktop\/$f\/EMOBON[0-9]*-products ; done /g' to_UDI_to_mv ; 
bash to_UDI_to_mv
*** example
! HWLTKDRXY.UDI235 ; do mv ~/Desktop/$f/results/functional-annotation ~/Desktop/$f/EMOBON[0-9]*-products ; done 

*** now re-using the same code - for clarity a better approach would be to give different names
sed -i 's/functional-annotation/sequence-categorisation/g'  to_UDI_to_mv
bash to_UDI_to_mv
*** example
! HWLTKDRXY.UDI235 ; do mv ~/Desktop/$f/results/sequence-categorisation ~/Desktop/$f/EMOBON[0-9]*-products ; done 

sed -i 's/sequence-categorisation/taxonomy-summary/g'  to_UDI_to_mv
bash to_UDI_to_mv
*** example
! HWLTKDRXY.UDI235 ; do mv ~/Desktop/$f/results/taxonomy-summary ~/Desktop/$f/EMOBON[0-9]*-products ; done 

sed -i 's/taxonomy-summary/*/g'  to_UDI_to_mv
sed -i 's/products/sequence/g'  to_UDI_to_mv
bash to_UDI_to_mv
*** example
! HWLTKDRXY.UDI235 ; do mv ~/Desktop/$f/results/* ~/Desktop/$f/EMOBON[0-9]*-sequence ; done 

*** below just being lazy - code rather than renaming is removing folders
sed -i 's/do mv/do rm /g'  to_UDI_to_mv
cut -f1-8 -d" " to_UDI_to_mv | sed 's/\/\*//g' | sed 's/$/ ; done /g' | sed 's/rm/ rm -r/g' > to_UDI_rmRESULTS
bash to_UDI_rmRESULTS
*** example
! HWLTKDRXY.UDI235 ; do rm  ~/Desktop/$f/results/* ~/Desktop/$f/EMOBON[0-9]*-sequence ; done 

# for f in HWLTKDRXY.UDI235 ; do rm ~/Desktop/$f/results/* ~/Desktop/$f/EMOBON[0-9]*-sequence ; done 
# for f in HWLTKDRXY.UDI235 ; do rm ~/Desktop/$f/results/* ~/Desktop/$f/EMOBON[0-9]*-sequence ; done 
# for f in HWLTKDRXY.UDI235 ; do mv ~/Desktop/$f/results/taxonomy-summary ~/Desktop/$f/EMOBON[0-9]*-products ; done 

# *** the ro-crate-config.yaml can be customised for each sample - sth to do soon
#python create-ro-crate.py HMNJKDSX3-UDI204/ ro-crate-config.yaml 


**** - path 1 preparing the "-sequencing" ro-crates 

#*** complication - first rename the *qc_summary files
#for f in *.qc_summary ; do rename 's/qc_summary/qc.summary/g' $f ; done 
# for f in *_2rocrates ; do rename 's/_/./g' $f ; done

*** quick code to remove _AAAOLDSA_1_1... from *_clean.fastq.trimmed.fasta and *.qc_summary for the sequencing files
*** go to Desktop and run code_to_rename_trimmed_seq
*** what I have now is:
DBH_AAAEOSDA_4_1_HMNJKDSX3.UDI204_clean.fastq.trimmed.fasta (keep) (seq)
DBH_AAAEOSDA_4_1_HMNJKDSX3.UDI204_clean.fastq.trimmed.qc_summary (keep) (seq)

*** what I want is: (otherwise each script to make ro-crates would need to be modified as the file naming is unique per sample, i.e. not standardized  - ot the code create-ro-create-seq.py would need to automatically detect the namings ... - much easier is to just rename the files beforehand)
DBH_1_clean.fastq.trimmed.fasta
DBH_1_clean.fastq.trimmed.qc_summary

*** based on ChatGPT and modification after use code_to_rename_trimmed_seq - it will recognise files with five "_" signs (i.e. adjust the qc summary files first) and then it will cut out any characters between the first and fourth "_" character
for f in *.qc_summary ; do rename 's/qc_summary/qc.summary/g' $f ; done 
bash code_to_rename_trimmed_seq

*** content of code_to_rename_trimmed_seq 
#!/bin/bash

# Define the directory containing the files
directory="/home/andrzej/Desktop/*_2rocrates/EMOBON[0-9]*-sequence"

# Go to the directory
cd "$directory" 

# Loop through each file in the directory
for file in *; do
    # Check if the file name contains at least five underscores
    if [[ "$file" == *_*_*_*_* ]]; then
        # Extract the parts of the filename
        first_part="${file%%_*}" # to get A
        second_part="${file#*_*_*_}"  #to get D_E_F
        fourth_part="${second_part%%_*}" # to get D 
        fifth_part="${second_part%%_*}"
        last_part="${file##*_*_*_}"
        # Combine the parts to form the new filename
        new_name="$first_part"_"$fourth_part"_"$last_part"
        # Rename the file
        mv "$file" "$new_name"
        echo "Renamed $file to $new_name"
    else
        echo "Skipping $file - does not contain at least five underscores"
    fi
done


*** significant changes to the .py - trying to optimise it for the EMOBON00000-sequencing

python create-ro-crate_seq.py HMNJKDSX3_UDI236_2rocrates/ ro-crate-config.yaml

*** the problem of the template... 
*** the current link to the url in the create-ro-create.py is https://raw.githubusercontent.com/emo-bon/MetaGOflow-Data-Products-RO-Crate/main/ro-crate-metadata.json-template"
*** I change it to https://eosc-fairease-test3.s3.mesocentre.uca.fr/rocrate_template_seqs.txt in create-ro-create_seq.py
*** note that the location of the template changed from github to s3store

*** first upload it to s3store so that I can use url in the create-ro-crate_seq.py (line 280)
s5cmd --profile eosc-fairease1 --endpoint-url https://s3.mesocentre.uca.fr cp rocrate_template_seqs.txt s3://eosc-fairease-test3

*** ready to create a sequencing ro-crate (please note that as the files are on a local drive their directory address in json file is only temporal, i.e. .json file needs further modifications)
python create-ro-crate_seq.py HMNJKDSX3_UDI236_2rocrates/ ro-crate-config.yaml

**** seems all good - it creates a zip file containing .json file

*** I tried to validate it using ro-crate-validator.py 
*** https://github.com/ResearchObject/ro-crate-validator-py/tree/main
*** but I can't get it to work at all - tried to .tar the file (rather than zip it and it still complains that it can't find the .json file) - code as follows: 
*** from rocrateValidator import validate as validate
*** v = validate.validate("example.tar")
*** v.validator()
*** found some website supposly doing the same ? - it can even triplisise the files ?
*** https://json-ld.org/playground/


*** now try to use url links to files rather than the actual files 
*** create a small script to replace "@id": "DBH..." with "@id": "https://eosc-fairease-test3.s3...." - not an elegant solution but works fine

grep "@id"  ro-crate-metadata.json | tail -15 > A
grep "@id"  ro-crate-metadata.json | tail -15 | sed 's/: "/: "https:\/\/eosc-fairease-test3.s3.mesocentre.uca.fr\//g' > B

*** ask chatgpt to create python code to replace A with B in ro-crate-metadata.json file (works, bash did not work)

*** code_to_sed_replace_list.py
file1="A"  # File containing words to be replaced
file2="B"  # File containing replacement words
file3="ro-crate-metadata.json"  # Output file

# Check if the files exist
if [ ! -f "$file1" ]; then
    echo "File $file1 not found."
    exit 1
fi

if [ ! -f "$file2" ]; then
    echo "File $file2 not found."
    exit 1
fi

# Perform replacements
while IFS= read -r word1 && IFS= read -r word2 <&3; do
    sed -i 's/$word1/$word2/g' "$file3"
done <"$file1" 3<"$file2"

echo "Replacements completed."

*** run the script
python code_to_sed_replace_list.py

*** some bits to modify separately
sed -i 's/"@id": "ro-crate-metadata.json",/"@id": "https:\/\/eosc-fairease-test3.s3.mesocentre.uca.fr\/ro-crate-metadata.json",/g' ro-crate-metadata.json

*** check it ! - purpose: take out the .json file out from the zip file (file needs to be unzipped and zipped again)
mv  -- -ro-crate.zip ro-crate.zip
unzip ro-crate.zip -d ro-crate
cp ro-crate/ro-crate-metadata.json EMOBON00092-sequence/
rm -r ro-crate
cp ro-crate.zip EMOBON00092-products/

*** push the ro-crate onto s3store
s5cmd --profile eosc-fairease1 --endpoint-url https://s3.mesocentre.uca.fr cp EMOBON00092-products-ro-crate.zip s3://eosc-fairease-test3

*** add ro-crate-metadata.json onto EMOBON github space https://github.com/emo-bon/analysis-results-cluster-01-data/tree/main
*************** done ************

**** now data-products *********** 27.03.2024



******** BIFURCATION - path 2 (data products)
*** template: deleted fastp and contigs file links and upload it to s3store
s5cmd --profile eosc-fairease1 --endpoint-url https://s3.mesocentre.uca.fr cp rocrate_template_products.txt s3://eosc-fairease-test3

*** create-ro-crate_prod.py only needed "results" to be deleted
python create-ro-crate_prod.py EMOBON00092-products ro-crate-config.yaml

*** unzip - cope .json - zip again removing "-" from the name and add the EMOBONXXX-sequence
mv  -- -ro-crate.zip ro-crate.zip
unzip ro-crate.zip -d ro-crate
cp ro-crate/ro-crate-metadata.json HMNJKDSX3_UDI236_2rocrates/EMOBON00092-products/
rm -r ro-crate
cp ro-crate.zip HMNJKDSX3_UDI236_2rocrates/EMOBON00092-products/

**** done



